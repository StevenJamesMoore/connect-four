{"version":3,"sources":["game/game-base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA4C;AAI5C;IAQE,kBAAY,OAAsB,EAAE,MAAyB;QAF7D,aAAQ,GAAkB,EAAE,CAAA;QAG1B,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,MAAM,CAAC,CAAA;QAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAA;QACxB,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IACD,wBAAK,GAAL;QACE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;QAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACtB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IAEK,wBAAK,GAAX;;;;;;wBACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;;;6BAClB,CAAC,IAAI,CAAC,SAAS;wBACpB,WAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;wBAAjB,SAAiB,CAAA;wBACX,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;wBACrC,IAAI,MAAM,KAAK,kBAAU,CAAC,KAAK,EAAE;4BAC/B,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAA;4BACnD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;4BAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;4BAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;4BACrB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;4BAC1B,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAA;4BAC3B,cAAK;yBACN;;;;;;KAEJ;IACK,uBAAI,GAAV;;;;;;wBACE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;4BACvB,WAAM;yBACP;wBACK,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;wBACpD,eAAe,GAAG,KAAK,CAAA;;;6BACpB,CAAC,eAAe;wBACN,WAAM,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;wBAAlD,MAAM,GAAG,SAAyC;wBACxD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;wBACR,WAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAClD,aAAa,EACb,MAAM,CACP,EAAA;;wBAHD,eAAe,GAAG,SAGjB,CAAA;wBACD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;wBACzB,IAAI,CAAC,eAAe,EAAE;4BACpB,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;yBAC5C;6BAAM;4BACL,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;yBACvB;;;wBAEH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;;;;;KAC5C;IACD,4BAAS,GAAT,UAAU,MAAc;IAExB,CAAC;IAEO,gCAAa,GAArB;QACE,OAAO,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC3C,CAAC;IACH,eAAC;AAAD,CAnEA,AAmEC,IAAA;AAnEqB,4BAAQ","file":"game-base.js","sourcesContent":["import { Board, BoardPiece } from '../board'\r\nimport { Player } from '../player'\r\nimport { Utils } from '../utils'\r\n\r\nexport abstract class GameBase {\r\n  board: Board\r\n  players: Array<Player>\r\n  currentPlayerId: number\r\n  isMoveAllowed: boolean\r\n  isGameWon: boolean\r\n  gamesWon: Array<number> = []\r\n\r\n  constructor(players: Array<Player>, canvas: HTMLCanvasElement) {\r\n    this.board = new Board(canvas)\r\n    this.players = players\r\n    this.currentPlayerId = 0\r\n    this.reset()\r\n  }\r\n  reset() {\r\n    this.isMoveAllowed = false\r\n    this.isGameWon = false\r\n    this.board.reset()\r\n    this.board.render()\r\n    this.board.debug()\r\n  }\r\n\r\n  async start() {\r\n    this.isMoveAllowed = true\r\n    while (!this.isGameWon) {\r\n      await this.move()\r\n      const winner = this.board.getWinner()\r\n      if (winner !== BoardPiece.EMPTY) {\r\n        console.log('Game over: winner is player ', winner)\r\n        this.board.gameDone(winner)//gameRecord.push(winner)\r\n        console.log(this.board.gameRecord)\r\n        this.isGameWon = true\r\n        this.isMoveAllowed = false\r\n        this.board.announceWinner()\r\n        break\r\n      }\r\n    }\r\n  }\r\n  async move() {\r\n    if (!this.isMoveAllowed) {\r\n      return\r\n    }\r\n    const currentPlayer = this.players[this.currentPlayerId]\r\n    let actionSuccesful = false\r\n    while (!actionSuccesful) {\r\n      const action = await currentPlayer.getAction(this.board)\r\n      this.isMoveAllowed = false\r\n      actionSuccesful = await this.board.applyPlayerAction(\r\n        currentPlayer,\r\n        action\r\n      )\r\n      this.isMoveAllowed = true\r\n      if (!actionSuccesful) {\r\n        console.log('Move not allowed! Try again.')\r\n      } else {\r\n        this.afterMove(action)\r\n      }\r\n    }\r\n    this.currentPlayerId = this.getNextPlayer()\r\n  }\r\n  afterMove(action: number) {\r\n    // no-op\r\n  }\r\n\r\n  private getNextPlayer() {\r\n    return this.currentPlayerId === 0 ? 1 : 0\r\n  }\r\n}\r\n"]}