{"version":3,"sources":["app.ts"],"names":[],"mappings":";;AAAA,4BAAyB;AACzB,6BAA8B;AAC9B,iCAA+B;AAE/B,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;IAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC/C,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAA;QACnC,OAAM;KACP;IACD,IAAM,KAAK,GAAG,IAAI,aAAK,CAAC,MAAM,CAAC,CAAA;IAC/B,KAAK,CAAC,MAAM,EAAE,CAAA;IAEd,IAAI,CAAC,CAAC,eAAe,IAAI,SAAS,CAAC,EAAE;QACnC,IAAM,iBAAiB,GAAG,QAAQ,CAAC,aAAa,CAC9C,4BAA4B,CAC7B,CAAA;QACD,IAAI,iBAAiB,EAAE;YACrB,iBAAiB,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;SACvD;KACF;IAED,IAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAA;IAClE,IAAI,WAAW,EAAE;QACf,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE;YACpC,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;YAC/C,IAAI,OAAO,EAAE;gBACX,IAAM,aAAa,GAEjB,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAA;gBAClD,IAAI,UAAU,GAAG,IAAI,CAAA;gBACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7C,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA;oBACrE,IAAI,UAAU,EAAE;wBACd,MAAK;qBACN;iBACF;gBACD,IAAI,CAAC,UAAU,EAAE;oBACf,UAAU,GAAG,YAAY,CAAA;iBAC1B;gBACD,IAAI,UAAU,KAAK,eAAe,EAAE;oBAClC,IAAI,CAAC,eAAe,EAAE,CAAA;iBACvB;qBAAM,IAAI,UAAU,KAAK,cAAc,EAAE;oBACxC,IAAI,CAAC,cAAc,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAA;iBAC3C;qBAAM,IAAI,UAAU,KAAK,YAAY,EAAE;oBACtC,IAAI,CAAC,eAAe,EAAE,CAAA;iBACvB;gBAED,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;gBAClC,OAAO,CAAC,gBAAgB,CAAC,eAAe,EAAE;oBACxC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;gBACjC,CAAC,CAAC,CAAA;aACH;QACH,CAAC,CAAC,CAAA;KACH;AACH,CAAC,CAAC,CAAA","file":"app.js","sourcesContent":["import 'es6-promise/auto'\r\nimport * as Game from './game'\r\nimport { Board } from './board'\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const canvas = document.querySelector('canvas')\r\n  if (!canvas) {\r\n    console.error('Canvas DOM is null')\r\n    return\r\n  }\r\n  const board = new Board(canvas)\r\n  board.render()\r\n\r\n  if (!('publishServer' in navigator)) {\r\n    const flywebOptionInput = document.querySelector(\r\n      '.mode-chooser-input-flyweb'\r\n    )\r\n    if (flywebOptionInput) {\r\n      flywebOptionInput.setAttribute('disabled', 'disabled')\r\n    }\r\n  }\r\n\r\n  const modeChooser = document.querySelector('.mode-chooser-submit')\r\n  if (modeChooser) {\r\n    modeChooser.addEventListener('click', () => {\r\n      const modeDOM = document.querySelector('.mode')\r\n      if (modeDOM) {\r\n        const modeInputDOMs = <NodeListOf<\r\n          HTMLInputElement\r\n        >>document.querySelectorAll('.mode-chooser-input')\r\n        let chosenMode = null\r\n        for (let i = 0; i < modeInputDOMs.length; i++) {\r\n          chosenMode = modeInputDOMs[i].checked ? modeInputDOMs[i].value : null\r\n          if (chosenMode) {\r\n            break\r\n          }\r\n        }\r\n        if (!chosenMode) {\r\n          chosenMode = 'offline-ai'\r\n        }\r\n        if (chosenMode === 'offline-human') {\r\n          Game.initGameLocal2p()\r\n        } else if (chosenMode === 'local-flyweb') {\r\n          Game.initGameFlyweb({ clientMode: false })\r\n        } else if (chosenMode === 'offline-ai') {\r\n          Game.initGameLocalAi()\r\n        }\r\n\r\n        modeDOM.classList.add('invisible')\r\n        modeDOM.addEventListener('transitionend', () => {\r\n          modeDOM.classList.add('hidden')\r\n        })\r\n      }\r\n    })\r\n  }\r\n})\r\n"]}